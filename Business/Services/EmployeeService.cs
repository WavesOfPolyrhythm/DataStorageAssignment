using Business.Dtos;
using Business.Factories;
using Business.Interfaces;
using Business.Models;
using Data.Entities;
using Data.Interfaces;
using Data.Repositories;
using System.Linq.Expressions;

namespace Business.Services;

public class EmployeeService(IEmployeeRepository employeeRepository, IRoleService roleService) : IEmployeeService
{
    private readonly IEmployeeRepository _employeeRepository = employeeRepository;
    private readonly IRoleService _roleService = roleService;

    public async Task<EmployeeModel> CreateEmployeeAsync(EmployeeRegistrationForm form)
    {
       await _employeeRepository.BeginTransactionAsync();
        try
        {
            var existingEmployee = await _employeeRepository.GetAsync(x => x.Email == form.Email);
            if (existingEmployee != null)
            {
                await _employeeRepository.RollbackTransactionAsync();
                return null!;
            }

            var entity = await _employeeRepository.CreateAsync(EmployeeFactory.Create(form));
            if (entity == null)
            {
                await _employeeRepository.RollbackTransactionAsync();
                return null!;
            }

            var employee = EmployeeFactory.Create(entity);
            if (employee == null)
            {
                await _employeeRepository.RollbackTransactionAsync();
                return null!;
            }
            await _employeeRepository.CommitTransactionAsync();

            return employee;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _employeeRepository.RollbackTransactionAsync();
            return null!;
        }
    }

    public async Task<IEnumerable<EmployeeModel>> GetAllEmployeesAsync()
    {
        var entities = await _employeeRepository.GetAllAsync();
        var employees = entities.Select(EmployeeFactory.Create);
        return employees;
    }

    public async Task<EmployeeEntity?> GetEmployeeEntityAsync(Expression<Func<EmployeeEntity, bool>> expression)
    {
        var employees = await _employeeRepository.GetAsync(expression);
        return employees;
    }

    public async Task<EmployeeModel?> UpdateEmployeeAsync(EmployeeUpdateForm form)
    {
        await _employeeRepository.BeginTransactionAsync();
        try
        {
            var existingEntity = await GetEmployeeEntityAsync(x => x.Id == form.Id);
            if (existingEntity == null)
            {
                await _employeeRepository.RollbackTransactionAsync();
                return null!;
            }

            /// <summary>
            /// Code generated by Chat GPT to ensure that an updated role is properly assigned to an Employee.
            /// 
            /// The code fetches the role from the service using the provided RoleId. 
            /// If the role does not exist, an error message is displayed, and the method returns null.
            /// Otherwise, it updates the Employee's RoleId and assigns the Role entity.
            /// </summary>
            
            var role = await _roleService.GetRoleEntityAsync(x => x.Id == form.RoleId);
            if (role == null)
            {
                Console.WriteLine("\nInvalid Role ID. Cannot update employee.");
                await _employeeRepository.RollbackTransactionAsync();
                return null!;
            }

            var updatedEntity = EmployeeFactory.Update(form, existingEntity);
            updatedEntity.RoleId = form.RoleId;
            updatedEntity.Role = role;

            updatedEntity = await _employeeRepository.UpdateAsync(x => x.Id == form.Id, updatedEntity);
            if (updatedEntity == null)
            {
                await _employeeRepository.RollbackTransactionAsync();
                return null!;
            }

            var employee = EmployeeFactory.Create(updatedEntity);
            if (employee == null)
            {
                await _employeeRepository.RollbackTransactionAsync();
                return null!;
            }
            await _employeeRepository.CommitTransactionAsync();
            return employee;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _employeeRepository.RollbackTransactionAsync();
            return null;
        }
    }

    public async Task<bool> DeleteEmployeeAsync(int id)
    {
        var result = await _employeeRepository.DeleteAsync(x => x.Id == id);
        return result;
    }
}
