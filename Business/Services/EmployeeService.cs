using Business.Dtos;
using Business.Factories;
using Business.Interfaces;
using Business.Models;
using Data.Entities;
using Data.Interfaces;
using Data.Repositories;
using System.Linq.Expressions;

namespace Business.Services;

public class EmployeeService(IEmployeeRepository employeeRepository, IRoleService roleService) : IEmployeeService
{
    private readonly IEmployeeRepository _employeeRepository = employeeRepository;
    private readonly IRoleService _roleService = roleService;

    public async Task<EmployeeModel> CreateEmployeeAsync(EmployeeRegistrationForm form)
    {
        var existingEmployee = await _employeeRepository.GetAsync(x => x.Email == form.Email);
        if (existingEmployee != null)
            return null!;

        var entity = await _employeeRepository.CreateAsync(EmployeeFactory.Create(form));
        var employee = EmployeeFactory.Create(entity);

        return employee ?? null!;
    }

    public async Task<IEnumerable<EmployeeModel>> GetAllEmployeesAsync()
    {
        var entities = await _employeeRepository.GetAllAsync();
        var employees = entities.Select(EmployeeFactory.Create);
        return employees;
    }

    public async Task<EmployeeEntity?> GetEmployeeEntityAsync(Expression<Func<EmployeeEntity, bool>> expression)
    {
        var employees = await _employeeRepository.GetAsync(expression);
        return employees;
    }

    public async Task<EmployeeModel?> UpdateEmployeeAsync(EmployeeUpdateForm form)
    {
        try
        {
            var existingEntity = await GetEmployeeEntityAsync(x => x.Id == form.Id);

            if (existingEntity == null)
                return null!;

            existingEntity.Name = string.IsNullOrWhiteSpace(form.Name) ? existingEntity.Name : form.Name;
            existingEntity.Email = string.IsNullOrWhiteSpace(form.Email) ? existingEntity.Email : form.Email;

            /// <summary>
            /// Code generated by Chat GPT to ensure that an updated role is properly assigned to an Employee.
            /// 
            /// The code fetches the role from the service using the provided RoleId. 
            /// If the role does not exist, an error message is displayed, and the method returns null.
            /// Otherwise, it updates the Employee's RoleId and assigns the Role entity.
            /// </summary>
            
            var role = await _roleService.GetRoleEntityAsync(x => x.Id == form.RoleId);
            if (role == null)
            {
                Console.WriteLine("\nInvalid Role ID. Cannot update employee.");
                return null!;
            }

            existingEntity.RoleId = form.RoleId;
            existingEntity.Role = role;

            var updatedEntity = await _employeeRepository.UpdateAsync(x => x.Id == form.Id, existingEntity);
            return EmployeeFactory.Create(existingEntity);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return null;
        }
    }

    public async Task<bool> DeleteEmployeeAsync(int id)
    {
        var result = await _employeeRepository.DeleteAsync(x => x.Id == id);
        return result;
    }
}
