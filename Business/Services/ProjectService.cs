using Business.Dtos;
using Business.Factories;
using Business.Interfaces;
using Business.Models;
using Data.Entities;
using Data.Interfaces;
using Data.Repositories;
using System.Linq.Expressions;

namespace Business.Services;

/// <summary>
/// Code generated by Chat GPT to ensure that an updated Id:s is properly assigned to a Project.
/// 
/// The code fetches the Id from the service using the provided Id from user input. 
/// If the Id does not exist, an error message is displayed, and the method returns null.
/// Otherwise, it updates the Id and assigns the choosen entity.
/// </summary>

public class ProjectService(IProjectRepository projectRepository, ICustomerService customerService, IEmployeeService employeeService, IServicesService servicesService, IStatusService statusService) : IProjectService
{
    private readonly IProjectRepository _projectRepository = projectRepository;
    private readonly ICustomerService _customerService = customerService;
    private readonly IEmployeeService _employeeService = employeeService;
    private readonly IServicesService _servicesService = servicesService;
    private readonly IStatusService _statusService = statusService;

    public async Task<ProjectModel> CreateProjectAsync(ProjectRegistrationForm form)
    {
        await _projectRepository.BeginTransactionAsync();

        try
        {
            var existingProject = await _projectRepository.GetAsync(x => x.Title == form.Title);
            if (existingProject == null)
            {
                await _projectRepository.RollbackTransactionAsync();
                return null!;
            }

            var customer = await _customerService.GetCustomerEntityAsync(x => x.Id == form.CustomerId);
            if (customer == null)
            {
                Console.WriteLine("\n Customer not found. Returning to menu.");
                await _projectRepository.RollbackTransactionAsync();
                return null!;
            }

            var service = await _servicesService.GetServiceEntityAsync(x => x.Id == form.ServiceId);
            if (service == null)
            {
                Console.WriteLine("\n Invalid Service ID. Returning to menu.");
                await _projectRepository.RollbackTransactionAsync();
                return null!;
            }

            var entity = await _projectRepository.CreateAsync(ProjectFactory.Create(form, service));

            if (entity == null)
            {
                await _projectRepository.RollbackTransactionAsync();
                return null!;
            }
            await _projectRepository.CommitTransactionAsync();

            var project = ProjectFactory.Create(entity);

            return project ?? null!;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _projectRepository.RollbackTransactionAsync();
            return null!;
        }
    }

    public async Task<IEnumerable<ProjectModel>> GetAllProjectsAsync()
    {
        var entities = await _projectRepository.GetAllAsync();
        var projects = entities.Select(ProjectFactory.Create);
        return projects;
    }

    public async Task<ProjectEntity?> GetProjectEntityAsync(Expression<Func<ProjectEntity, bool>> expression)
    {
        var project = await _projectRepository.GetAsync(expression);
        return project;
    }

    public async Task<ProjectModel?> UpdateProjectAsync(ProjectUpdateForm form)
    {
        await _projectRepository.BeginTransactionAsync();

        try
        {
            var existingEntity = await GetProjectEntityAsync(x => x.Id == form.Id);
            if (existingEntity == null)
            {
                await _projectRepository.RollbackTransactionAsync();
                return null!;
            }

            var employee = await _employeeService.GetEmployeeEntityAsync(x => x.Id == form.EmployeeId);
            if (employee == null)
            {
                Console.WriteLine("\nInvalid Employee ID. Rolling back transaction.");
                await _projectRepository.RollbackTransactionAsync();
                return null!;
            }

            var customer = await _customerService.GetCustomerEntityAsync(x => x.Id == form.CustomerId);
            if (customer == null)
            {
                Console.WriteLine("\nInvalid Customer ID. Rolling back transaction.");
                await _projectRepository.RollbackTransactionAsync();
                return null!;
            }

            var service = await _servicesService.GetServiceEntityAsync(x => x.Id == form.ServiceId);
            if (service == null)
            {
                Console.WriteLine("\nInvalid Service ID. Rolling back transaction.");
                await _projectRepository.RollbackTransactionAsync();
                return null!;
            }

            var status = await _statusService.GetStatusEntityAsync(x => x.Id == form.StatusId);
            if (status == null)
            {
                Console.WriteLine("\nInvalid Status ID. Rolling back transaction.");
                await _projectRepository.RollbackTransactionAsync();
                return null!;
            }

            var updatedEntity = ProjectFactory.Update(form, existingEntity, employee, customer, service, status);
            updatedEntity = await _projectRepository.UpdateAsync(x => x.Id == form.Id, updatedEntity);

            if (updatedEntity == null)
            {
                await _projectRepository.RollbackTransactionAsync();
                return null!;
            }

            var project = ProjectFactory.Create(updatedEntity);
            if (project == null)
            {
                await _projectRepository.RollbackTransactionAsync();
                return null!;
            }

            await _projectRepository.CommitTransactionAsync();
            return project;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _projectRepository.RollbackTransactionAsync();
            return null;
        }
    }


    public async Task<bool> DeleteProjectAsync(int id)
    {
        var result = await _projectRepository.DeleteAsync(x => x.Id == id);
        return result;
    }
}
