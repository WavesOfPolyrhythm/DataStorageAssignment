using Business.Dtos;
using Business.Models;
using Data.Entities;

namespace Business.Factories;

public static class CustomerContactFactory
{
    public static CustomerContactRegistrationForm Create() => new();
    public static CustomerContactUpdateForm Update() => new();

    public static CustomerContactEntity Create(CustomerContactRegistrationForm form) => new()
    {
        Name = form.Name,
        PhoneNumber = form.PhoneNumber,
        Email = form.Email,
        CustomerId = form.CustomerId,
    };

    public static CustomerContactModel Create(CustomerContactEntity entity) => new()
    {
        Id = entity.Id,
        Name = entity.Name,
        PhoneNumber = entity.PhoneNumber,
        Email = entity.Email,
        CustomerId = entity.CustomerId,
        CustomerName = entity.Customer.CustomerName
    };

    /// <summary>
    /// Code generated by Chat GPT to ensure that an updated CustomerId is properly assigned to a CustomerContact.
    ///
    /// The code checks if the provided CustomerId from user input is valid. 
    /// If the new CustomerId is not 0, it updates the value; otherwise, it retains the existing one.
    /// Additionally, it ensures that the Customer entity is assigned correctly.
    /// If the existing Customer entity is null, a new instance is created with the updated CustomerId.
    /// </summary>

    public static CustomerContactEntity Update(CustomerContactUpdateForm form, CustomerContactEntity existingEntity) => new()
    {
        Id = form.Id,
        Name = string.IsNullOrWhiteSpace(form.Name) ? existingEntity.Name : form.Name,
        Email = string.IsNullOrWhiteSpace(form.Email) ? existingEntity.Email : form.Email,
        PhoneNumber = string.IsNullOrWhiteSpace(form.PhoneNumber) ? existingEntity.PhoneNumber : form.PhoneNumber,
        CustomerId = form.CustomerId != 0 ? form.CustomerId : existingEntity.CustomerId,
        Customer = existingEntity.Customer ?? new CustomerEntity { Id = form.CustomerId },
    };
}
